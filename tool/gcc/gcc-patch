diff -ruN gcc-5.4.0/libgcc/config/i386/linux-unwind.h gcc-5.4.0-patched/libgcc/config/i386/linux-unwind.h
--- gcc-5.4.0/libgcc/config/i386/linux-unwind.h	2015-01-05 07:33:28.000000000 -0500
+++ gcc-5.4.0-patched/libgcc/config/i386/linux-unwind.h	2021-08-11 13:33:49.438128713 -0400
@@ -58,7 +58,7 @@
   if (*(unsigned char *)(pc+0) == 0x48
       && *(unsigned long long *)(pc+1) == RT_SIGRETURN_SYSCALL)
     {
-      struct ucontext *uc_ = context->cfa;
+	  ucontext_t *uc_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
          because it does not alias anything.  */
@@ -138,7 +138,7 @@
 	siginfo_t *pinfo;
 	void *puc;
 	siginfo_t info;
-	struct ucontext uc;
+	ucontext_t uc;
       } *rt_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
diff -ruN gcc-5.4.0/libsanitizer/asan/asan_linux.cc gcc-5.4.0-patched/libsanitizer/asan/asan_linux.cc
--- gcc-5.4.0/libsanitizer/asan/asan_linux.cc	2014-09-23 13:59:53.000000000 -0400
+++ gcc-5.4.0-patched/libsanitizer/asan/asan_linux.cc	2021-08-11 13:34:29.432112184 -0400
@@ -32,6 +32,7 @@
 #include <stdio.h>
 #include <unistd.h>
 #include <unwind.h>
+#include <signal.h>
 
 #if SANITIZER_FREEBSD
 #include <sys/link_elf.h>
diff -ruN gcc-5.4.0/libsanitizer/sanitizer_common/sanitizer_linux.cc gcc-5.4.0-patched/libsanitizer/sanitizer_common/sanitizer_linux.cc
--- gcc-5.4.0/libsanitizer/sanitizer_common/sanitizer_linux.cc	2014-11-21 09:03:37.000000000 -0500
+++ gcc-5.4.0-patched/libsanitizer/sanitizer_common/sanitizer_linux.cc	2021-08-11 13:35:22.026720874 -0400
@@ -514,7 +514,7 @@
 }
 #endif
 
-uptr internal_sigaltstack(const struct sigaltstack *ss,
+uptr internal_sigaltstack(void *ss,
                          struct sigaltstack *oss) {
   return internal_syscall(SYSCALL(sigaltstack), (uptr)ss, (uptr)oss);
 }
diff -ruN gcc-5.4.0/libsanitizer/sanitizer_common/sanitizer_linux.h gcc-5.4.0-patched/libsanitizer/sanitizer_common/sanitizer_linux.h
--- gcc-5.4.0/libsanitizer/sanitizer_common/sanitizer_linux.h	2014-05-22 03:09:21.000000000 -0400
+++ gcc-5.4.0-patched/libsanitizer/sanitizer_common/sanitizer_linux.h	2021-08-11 13:35:52.712243003 -0400
@@ -27,7 +27,7 @@
 
 // Syscall wrappers.
 uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count);
-uptr internal_sigaltstack(const struct sigaltstack* ss,
+uptr internal_sigaltstack(const void *ss,
                           struct sigaltstack* oss);
 uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,
     __sanitizer_sigset_t *oldset);
diff -ruN gcc-5.4.0/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc gcc-5.4.0-patched/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc
--- gcc-5.4.0/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc	2014-05-22 03:09:21.000000000 -0400
+++ gcc-5.4.0-patched/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc	2021-08-11 13:36:38.194499283 -0400
@@ -234,7 +234,7 @@
 
   // Alternate stack for signal handling.
   InternalScopedBuffer<char> handler_stack_memory(kHandlerStackSize);
-  struct sigaltstack handler_stack;
+  stack_t handler_stack;
   internal_memset(&handler_stack, 0, sizeof(handler_stack));
   handler_stack.ss_sp = handler_stack_memory.data();
   handler_stack.ss_size = kHandlerStackSize;
diff -ruN gcc-5.4.0/libsanitizer/tsan/tsan_platform_linux.cc gcc-5.4.0-patched/libsanitizer/tsan/tsan_platform_linux.cc
--- gcc-5.4.0/libsanitizer/tsan/tsan_platform_linux.cc	2014-11-13 15:41:38.000000000 -0500
+++ gcc-5.4.0-patched/libsanitizer/tsan/tsan_platform_linux.cc	2021-08-11 13:37:19.836565226 -0400
@@ -43,7 +43,7 @@
 #include <dlfcn.h>
 #if SANITIZER_LINUX
 #define __need_res_state
-#include <resolv.h>
+#include "bits/types/res_state.h"
 #endif
 
 #ifdef sa_handler
